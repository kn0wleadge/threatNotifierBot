from aiogram import F,Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.methods.send_message import SendMessage

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from tgbot.keyboards.startKeyboards import startKeyboard
from tgbot.keyboards.defaultKeyboards import defaultKeyboard
from tgbot.keyboards.application_keyboard import application_markup

from tgbot.services.softwareListStrToTuple import softwareListStrToTuple

from tgbot.database.requests import check_if_user_exists_and_create, add_first_users_software_list,check_if_user_exists
from tgbot.database.create_user_application import create_application
from tgbot.database.check_user_application import check_user_application
from tgbot.database.check_user_soft import check_user_soft

from bot_init import bot,dp

import datetime

import os
class UserApplicationCallbackData(CallbackData, prefix = 'Application'):
                state: bool
                tg_id: int

StartRouter = Router()

class Reg(StatesGroup):
    software_input_state = State()


@StartRouter.message(CommandStart())
async def cmd_start(message: Message):

    user = await check_if_user_exists(message.from_user.id)
    print(f'is user exists? - {user}')
    if not user:
        user_application = await check_user_application(message.from_user.id)
        print(f'user sent application already? - {user_application}')
        #–ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞
        if not user_application:
            #–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ tgid –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            admin_list = os.getenv('ADMIN_TG_ID').split(',')

            #await message.answer(f'–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö –ü–û.\n–î–ª—è –Ω–∞—á–∞–ª–∞, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—â–µ–≥–æ —Ç–µ–±—è –ü–û.\nC–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n/softlist - —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ü–û\n/current_threats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑ –ü–û\n/solved_threats - —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –ü–û\n/change_softlist - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ü–û\n'                       
            #                    ,reply_markup=startKeyboard)
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö –ü–û.\n–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç —Ç–≤–æ—é –∑–∞—è–≤–∫—É.\n')
            application = {'tg_id': message.from_user.id, 'name':message.from_user.first_name, 'date': datetime.datetime.now()}

            #–°–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î –∑–∞–ø–∏—Å–∏ –æ –∑–∞—è–≤–∫–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await create_application(application)
            
            #–°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            builder = InlineKeyboardBuilder()
            builder.button(text = '–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', callback_data = UserApplicationCallbackData(state = True, tg_id = application['tg_id']).pack())
            builder.button(text = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å üö´', callback_data = UserApplicationCallbackData(state = False, tg_id = application['tg_id']).pack())
            
            
            str = f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {application['name']}\n–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏ - {application['date']}"
            for admin_id in admin_list:
                print(f"id –∞–¥–º–∏–Ω–∞ - {admin_id}")
                await bot.send_message(chat_id= admin_id, text = str
                                       ,reply_markup=builder.as_markup())
        else:
            await message.answer(f'–¢–≤–æ—è –∑–∞—è–≤–∫–∞ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—ë –æ–¥–æ–±—Ä–∏—Ç üôÇ')
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö –ü–û. –ù–∞–∂–º–∏ –Ω–∞ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞')



    
 
@StartRouter.message(F.text == '–í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ü–û')
#TODO - –ø—Ä–æ–¥—É–º–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ü–û, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –≤–≤—ë–ª –µ–≥–æ
async def software_input(message: Message, state: FSMContext):
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ(–µ—Å–ª–∏ –Ω–∞–¥–æ)
    user_entered_soft = await check_user_soft(message.from_user.id)
    if(not user_entered_soft):
        await state.set_state(Reg.software_input_state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ü–û. –í–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏—è –ü–û –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã.',
                            reply_markup= None)
    else:
        await message.answer('–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –ü–û!',
                            reply_markup= None)


@StartRouter.message(Reg.software_input_state)
async def reg_two(message:Message, state: FSMContext):
    print('registrating new soft')
    data = message.text
    separated_data = softwareListStrToTuple(data)
    for i in separated_data:
        print(i)
    await add_first_users_software_list(message.from_user.id, separated_data)
    await state.update_data(software_input_state = message.text)  
    #TODO - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer('–°–ø–∏—Å–æ–∫ –ü–û —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω, –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ –Ω–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö, –≤—ã —Ç—É—Ç –∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', reply_markup=None)
    await state.clear()
#1)–ø—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–±–∏—Ä–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤2+
#2)–ø—Ä–æ–≤–µ—Ä–∫–∞ connect_soft
#3)—Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Å–≤—è–∑—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º —Å–æ—Ñ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Å–æ–±–ª–µ–Ω –ø—Ä–æ–±–µ–ª–æ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
#folders - templates(jinja2), handlers, service(?), 
# ORM - SQLAlchemy, 
# ParseLib - PlayWright
# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - LoGuru
#–¥–∏–¥–∂–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º(https://www.youtube.com/watch?v=ExaQHffBE20,)
